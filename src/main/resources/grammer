<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <variable-declaration> done

<function-definition> ::= 'fn' <identifier> '(' ')' <compound-statement>
                        | 'fn' <identifier> '(' <parameter-list> ')' <compound-statement>


<variable-declaration> ::= 'let' <declarator> ':' <type-specifier> '=' <expression> ';'
                          | 'let' <declarator> ':' <type-specifier> ';' done


<parameter-list> ::= <parameter-declaration>
                  | <parameter-list> ',' <parameter-declaration> done
<parameter-declaration> ::= <type-specifier> <declarator> done

<declarator> ::= <identifier>
                | <declarator> '[' <integer-constant> ']' done

<type-specifier> ::= 'int'
                   | 'float'
                   | 'char'
                   | 'void'
                   | 'bool'
                   | 'uint'
                   | 'str' done

<compound-statement> ::= '{' {<statement> }* '}' done


<statement> ::= <variable-declaration>
              | <control-flow-statement>
              | <jump-statement>
              | <expression-statement>
              |<print-statement>
              |<input-statement>
              |<Assignment-statement> done
<Assignment-statement> ::= <declarator> '=' <expression> ';' done

<print-statement> ::= 'print' '(' <expression> ')' ';' done

<input-statement> ::= 'input' '(' ')' ';' done
<jump-statement> ::= 'continue' ';'
                   | 'break' ';'
                   | 'return' {<expression>}? ';' done

<control-flow-statement> ::= <if-statement>
                            | <while-statement>
                            | <for-statement>

<if-statement> ::= 'if' '(' <expression> ')'  <compound-statement> ['else' <statement>] done

<while-statement> ::= 'while' '(' <expression> ')'  <compound-statement>  done

<for-statement> ::= 'for' '(' [<expression>] ';' [<expression>] ';' [<expression>] ')' <statement> done

<expression-statement> ::= [<expression>] ';'

<expression> ::= <logical-expression>


<logical-expression> ::= <logical-term> { ('||' | '&&') <logical-term> }

<logical-term> ::= <comparison> { ('==' | '!=') <comparison> }

<comparison> ::= <additive-expression> { ('>' | '<' | '<=' | '>=') <additive-expression> }

<additive-expression> ::= <multiplicative-expression> {('+' | '-') <multiplicative-expression>}

<multiplicative-expression> ::= <unary-expression> {('*' | '/' | '%') <unary-expression>}

<unary-expression> ::= <primary-expression>
                      | ('++' | '--') <unary-expression>
                      | '!' <unary-expression>


<primary-expression> ::= <identifier>
                        | <constant>
                        | '(' <expression> ')'

<constant> ::= <integer-constant>
             | <float-constant>
             | <character-constant>
             | <string-literal>
             | <boolean-constant>

<integer-constant> ::= [-+]?[0-9]+

<float-constant> ::= [-+]?[0-9]*\.[0-9]+

<character-constant> ::= "'" <character> "'"
<character> ::= <escape-sequence> | <c-char>
<c-char> ::= <any ASCII character except single-quote or backslash>
<string-literal> ::= '"' <characters> '"'
<characters> ::= <character> <characters> | <character>
<boolean-constant> ::= 'true'
                     | 'false'
<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*
////
//TODO: Add Assignment To array
//TODO: Add Function Call

//TODO: Add Switch Statement
